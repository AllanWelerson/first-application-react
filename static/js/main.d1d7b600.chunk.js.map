{"version":3,"sources":["logo.svg","menu/Menu.module.css","users/Users.module.css","posts/Posts.module.css","menu/Menu.js","services/Data.js","users/Users.js","posts/Posts.js","router/RouterApp.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","menu","users","posts","Menu","react_default","a","createElement","className","style","Link","to","React","Component","http","axios","create","baseURL","Data","getPosts","get","getUsers","Users","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","then","result","setState","toConsumableArray","data","loaded","state","_this$state","map","user","index","key","name","Posts","stateB","catch","err","console","log","post","title","AppRouter","Switch","Route","path","exact","component","App","updateState","event","value","target","type","checked","defineProperty","src","logo","alt","BrowserRouter","RouterApp","Menu_Menu","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d1d7b600.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__3rTCi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__KINFq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"Posts_posts__1rFHd\"};","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport style from './Menu.module.css';\n\nexport default class Menu extends React.Component {\n\n    render(){\n\n        return ( <nav className={style.menu}>\n                    <ul>\n                        <li><Link to=\"/users\">Users</Link></li>\n                        <li><Link to=\"/posts\">Posts</Link></li>\n                    </ul>\n                </nav>\n                )\n\n    }\n\n}","import axios from 'axios';\n\n\nconst http = axios.create({\n    baseURL: 'https://jsonplaceholder.typicode.com/'\n});\n\nexport default {\n\n    getPosts : () => {\n        return http.get('/posts')\n    },\n\n    getUsers: () => {\n        return http.get('/users')\n    }\n\n\n\n}\n\n    \n \n\n","import React from 'react';\nimport Data from '../services/Data';\nimport style from './Users.module.css';\n\nexport default class Users extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            loaded : false,\n            users: []\n        }\n    }\n\n    getUsers = () => {\n        Data.getUsers().then(\n            result => {\n                this.setState({\n                    users: [...result.data],\n                    loaded: true\n                })\n            }\n        )\n    }\n\n    componentDidMount(){\n        this.getUsers();\n    }\n\n    render(){\n\n        const {loaded, users} = this.state;\n\n        if(loaded){\n            return  <section className={style.users}>\n                        <h1>Users</h1>\n                        <div>\n                            {users.map((user,index) => (\n                                <article key={index}>{user.name}</article>\n                            ))}\n                        </div>\n                    </section>\n        }else {\n            return <div>Carregando</div>\n        }\n\n    }\n\n}","import React from 'react';\nimport Data from '../services/Data';\nimport style from './Posts.module.css';\n\nexport default class Posts extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            posts : [],\n            loaded: false\n        }\n       \n        \n    }\n\n    getPosts = () =>{\n        Data.getPosts().then(\n            result => {\n                this.setState((stateB) =>({\n                   posts: [...result.data],                    \n                   loaded: true\n                })\n            )}\n        ).catch(\n            err =>{\n                console.log(err);\n            }\n        )\n    }\n\n    componentDidMount(){\n        this.getPosts();               \n    }\n\n    componentDidUpdate(){\n       \n    }\n\n    componentWillUnmount(){\n       \n    }\n\n\n   \n\n    render(){\n\n        const {posts, loaded} = this.state;\n\n        if(loaded){\n            return  <section className={style.posts}>\n                        <h1>Posts</h1>\n                        <span>Curretly under construction </span>\n                        <div>\n                        {posts.map((post, index) => (\n                            <article key={index}>{post.title}</article>\n                        ))}\n                        </div>\n                    </section>\n        }else{\n            return <div>Carregando</div>\n        }\n\n        \n    }\n\n}\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Users from '../users/Users';\nimport Posts from '../posts/Posts';\n\nconst AppRouter = () => (\n\n    \n        <section>\n            \n            <Switch>\n                <Route path=\"/\" exact component={Posts} />\n                <Route path=\"/posts/\" component={Posts} />\n                <Route path=\"/users/\" component={Users} />\n            </Switch>\n\n        </section>\n   \n\n)\n\nexport default AppRouter;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Menu from './menu/Menu';\nimport {BrowserRouter as Router } from 'react-router-dom';\n// import Posts from './posts/Posts';\n// import Users from './users/Users';\nimport RouterApp from './router/RouterApp';\n\n\n\nclass App extends Component {\n  \n  constructor(props){\n    super(props);\n    this.state = {\n     \n    }\n\n  }  \n  \n\n  updateState = (event) => {\n    const value = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\n    this.setState({[event.target.name]: value})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1>React + JsonPlaceholder</h1>\n        </header>\n\n        <Router>\n\n          <section className=\"content\">\n            \n            <main className=\"main\">\n                <RouterApp /> \n            </main>\n            <div className=\"menu\">\n              <Menu />\n            </div>\n          </section>\n        </Router>\n        \n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}